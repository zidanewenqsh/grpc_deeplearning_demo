# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import huggingface_pb2 as huggingface__pb2


class TextServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ClassifyText = channel.unary_unary(
                '/huggingface.TextService/ClassifyText',
                request_serializer=huggingface__pb2.TextRequest.SerializeToString,
                response_deserializer=huggingface__pb2.Classification.FromString,
                )
        self.GenerateText = channel.unary_unary(
                '/huggingface.TextService/GenerateText',
                request_serializer=huggingface__pb2.TextRequest.SerializeToString,
                response_deserializer=huggingface__pb2.Text.FromString,
                )
        self.NamedEntityRecognition = channel.unary_unary(
                '/huggingface.TextService/NamedEntityRecognition',
                request_serializer=huggingface__pb2.TextRequest.SerializeToString,
                response_deserializer=huggingface__pb2.Entities.FromString,
                )
        self.TranslateText = channel.unary_unary(
                '/huggingface.TextService/TranslateText',
                request_serializer=huggingface__pb2.TranslationRequest.SerializeToString,
                response_deserializer=huggingface__pb2.Text.FromString,
                )
        self.SentimentAnalysis = channel.unary_unary(
                '/huggingface.TextService/SentimentAnalysis',
                request_serializer=huggingface__pb2.TextRequest.SerializeToString,
                response_deserializer=huggingface__pb2.Classification.FromString,
                )
        self.SummarizeText = channel.unary_unary(
                '/huggingface.TextService/SummarizeText',
                request_serializer=huggingface__pb2.TextRequest.SerializeToString,
                response_deserializer=huggingface__pb2.Text.FromString,
                )


class TextServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ClassifyText(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateText(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NamedEntityRecognition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TranslateText(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SentimentAnalysis(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SummarizeText(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TextServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ClassifyText': grpc.unary_unary_rpc_method_handler(
                    servicer.ClassifyText,
                    request_deserializer=huggingface__pb2.TextRequest.FromString,
                    response_serializer=huggingface__pb2.Classification.SerializeToString,
            ),
            'GenerateText': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateText,
                    request_deserializer=huggingface__pb2.TextRequest.FromString,
                    response_serializer=huggingface__pb2.Text.SerializeToString,
            ),
            'NamedEntityRecognition': grpc.unary_unary_rpc_method_handler(
                    servicer.NamedEntityRecognition,
                    request_deserializer=huggingface__pb2.TextRequest.FromString,
                    response_serializer=huggingface__pb2.Entities.SerializeToString,
            ),
            'TranslateText': grpc.unary_unary_rpc_method_handler(
                    servicer.TranslateText,
                    request_deserializer=huggingface__pb2.TranslationRequest.FromString,
                    response_serializer=huggingface__pb2.Text.SerializeToString,
            ),
            'SentimentAnalysis': grpc.unary_unary_rpc_method_handler(
                    servicer.SentimentAnalysis,
                    request_deserializer=huggingface__pb2.TextRequest.FromString,
                    response_serializer=huggingface__pb2.Classification.SerializeToString,
            ),
            'SummarizeText': grpc.unary_unary_rpc_method_handler(
                    servicer.SummarizeText,
                    request_deserializer=huggingface__pb2.TextRequest.FromString,
                    response_serializer=huggingface__pb2.Text.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'huggingface.TextService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TextService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ClassifyText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/huggingface.TextService/ClassifyText',
            huggingface__pb2.TextRequest.SerializeToString,
            huggingface__pb2.Classification.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/huggingface.TextService/GenerateText',
            huggingface__pb2.TextRequest.SerializeToString,
            huggingface__pb2.Text.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NamedEntityRecognition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/huggingface.TextService/NamedEntityRecognition',
            huggingface__pb2.TextRequest.SerializeToString,
            huggingface__pb2.Entities.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TranslateText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/huggingface.TextService/TranslateText',
            huggingface__pb2.TranslationRequest.SerializeToString,
            huggingface__pb2.Text.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SentimentAnalysis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/huggingface.TextService/SentimentAnalysis',
            huggingface__pb2.TextRequest.SerializeToString,
            huggingface__pb2.Classification.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SummarizeText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/huggingface.TextService/SummarizeText',
            huggingface__pb2.TextRequest.SerializeToString,
            huggingface__pb2.Text.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
