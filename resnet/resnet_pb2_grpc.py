# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import resnet_pb2 as resnet__pb2


class ResNetServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ClassifyImage = channel.unary_unary(
                '/resnet.ResNetService/ClassifyImage',
                request_serializer=resnet__pb2.Image.SerializeToString,
                response_deserializer=resnet__pb2.ClassificationResult.FromString,
                )


class ResNetServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ClassifyImage(self, request, context):
        """图像分类的RPC接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ResNetServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ClassifyImage': grpc.unary_unary_rpc_method_handler(
                    servicer.ClassifyImage,
                    request_deserializer=resnet__pb2.Image.FromString,
                    response_serializer=resnet__pb2.ClassificationResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'resnet.ResNetService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ResNetService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ClassifyImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/resnet.ResNetService/ClassifyImage',
            resnet__pb2.Image.SerializeToString,
            resnet__pb2.ClassificationResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
